A)
Coroutinen in der Android Entwicklung bieten eine einfache und effiziente Möglichkeit, asynchrone
Aufgaben zu gestalten. Sie reduzieren die Komplexität und blockieren keine Threads, was Ressourcen
spart. Durch strukturierte Nebenläufigkeit erleichternsie die Verwaltung von Fehlern und
Abbruchprozessen. Zudem sind sie gut in Android integriert undermöglichen mithilfe von Dispatchern
eine gezielte Nutzung von Ressourcen. Im Vergleich zu traditionellem Multithreading bieten sie
Vorteile wie integriertes Exception Handling und übersichtlichen Kontrollfluss, was zu einer
benutzerfreundlicheren und leistungsfähigeren Entwicklung beiträgt.

B)
Ich habe in der Aufgabe 2 A Dispatchers.IO verwendet, da dieser speziell für IO intensive Aufgaben
gedacht ist, wie z.B Netzwerk- oder Datenbankoperationen. Solche Aufgaben erfordern häufiges Lesen
und Schreiben von Daten, die nicht auf dem Hauptthread ausgeführt werden sollten, um UI Blockaden
zu vermeiden.

C)
1. Navigation App
   Ein Foreground Service kann verwendet werden, um kontinuierlich den Standort eines Benutzers zu
   verfolgen und Navigationsanweisungen in Echtzeit bereitzustellen. Dies ist sinnvoll, da der
   Service unabhängig von der Benutzeroberfläche im Hintergrund läuft und durch die Anzeige einer
   Benachrichtigung sicherstellt, dass der Benutzer über die laufende Navigation informiert bleibt.

2. Daten Synchronisierung im Hintergrund
   Ein Background Service kann regelmäßig Benutzerdaten wie Kontakte, Kalender oder Dateien mit
   einem Server synchronisieren. Solche Aufgaben profitieren vom Einsatz eines Services, da sie
   unabhängig von Benutzerinteraktionen zuverlässig ausgeführt werden können, auch wenn die App
   nicht aktiv genutzt wird.

D)
Die Kombination von Services und Coroutinen in einer App bietet mehrere Vorteile.
Services ermöglichen es, langlaufende Operationen im Hintergrund auszuführen, selbst wenn die App
nicht im Vordergrund ist. Coroutinen hingegen bieten eine einfache und effiziente Möglichkeit,
asynchrone Operationen durchzuführen, ohne den Code zu verkomplizieren.Ein Beispiel aus der
Wetter App, in dem Services und Coroutinen kombiniert genutzt werden, ist
die Methode fetchForecastData in der WeatherViewModel Klasse. Diese Methode verwendet eine
Coroutine, um die Wettervorhersage asynchron von der API abzurufen.
